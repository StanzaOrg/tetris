defpackage tetris :
   import core
   import collections

;============================================================
;================== Id Pool =================================
;============================================================

val ID-SEQ = to-seq(0 to false)
val FREE-IDS = Vector<Int>()
val OBJ-MAP = Vector<?>()
public lostanza defn obj-id (x:ref<?>) -> int :
   var id:ref<Int>
   if empty?(FREE-IDS) == true : id = next(ID-SEQ)
   else : id = pop(FREE-IDS)
   set(OBJ-MAP, id, x)
   return id.value

public lostanza defn free-id (id:int) -> ref<False> :
   add(FREE-IDS, new Int{id})
   set(OBJ-MAP, new Int{id}, false)
   return false

public lostanza defn obj (id:int) -> ref<?> :
   return get(OBJ-MAP, new Int{id})

;============================================================   
;=================== QtWidget ===============================
;============================================================

extern QtWidget_new: (ptr<?>) -> ptr<?>
extern QtWidget_delete: (ptr<?>) -> int
extern QtWidget_show: (ptr<?>) -> int
extern QtWidget_set_width: (ptr<?>, int) -> int
extern QtWidget_set_height: (ptr<?>, int) -> int
extern QtWidget_set_listener: (ptr<?>, int) -> int

extern defn QtWidget_paintEvent (listener:int, event:ptr<?>) -> int :
   if listener >= 0 :
      painted(obj(listener) as ref<QtWidgetListener>)
   return 0

extern defn QtWidget_mousePressEvent (listener:int, event:ptr<?>) -> int :
   if listener >= 0 :
      mouse-pressed(obj(listener) as ref<QtWidgetListener>, new QMouseEvent{event})
   return 0

extern defn QtWidget_mouseReleaseEvent (listener:int, event:ptr<?>) -> int :
   if listener >= 0 :
      mouse-released(obj(listener) as ref<QtWidgetListener>, new QMouseEvent{event})
   return 0

extern defn QtWidget_mouseMoveEvent (listener:int, event:ptr<?>) -> int :
   if listener >= 0 :
      mouse-moved(obj(listener) as ref<QtWidgetListener>, new QMouseEvent{event})
   return 0

extern defn QtWidget_keyPressEvent (listener:int, event:ptr<?>) -> int :
   if listener >= 0 :
      key-pressed(obj(listener) as ref<QtWidgetListener>, new QKeyEvent{event})
   return 0

deftype QtWidgetListener
defmulti painted (l:QtWidgetListener) -> False
defmulti mouse-pressed (l:QtWidgetListener, e:QMouseEvent) -> False
defmulti mouse-released (l:QtWidgetListener, e:QMouseEvent) -> False
defmulti mouse-moved (l:QtWidgetListener, e:QMouseEvent) -> False
defmulti key-pressed (l:QtWidgetListener, e:QKeyEvent) -> False

defmethod painted (l:QtWidgetListener) : false
defmethod mouse-pressed (l:QtWidgetListener, e:QMouseEvent) : false
defmethod mouse-released (l:QtWidgetListener, e:QMouseEvent) : false
defmethod mouse-moved (l:QtWidgetListener, e:QMouseEvent) : false
defmethod key-pressed (l:QtWidgetListener, e:QKeyEvent) : false

;============================================================
;================== QMouseEvent =============================
;============================================================

extern QMouseEvent_x: (ptr<?>) -> int
extern QMouseEvent_y: (ptr<?>) -> int

lostanza deftype QMouseEvent :
   event: ptr<?>
   
lostanza defn x (e:ref<QMouseEvent>) -> ref<Int> :
   return new Int{call-c QMouseEvent_x(e.event)}

lostanza defn y (e:ref<QMouseEvent>) -> ref<Int> :
   return new Int{call-c QMouseEvent_y(e.event)}

;============================================================
;================== QKeyEvent ===============================
;============================================================

extern QKeyEvent_key: (ptr<?>) -> int

lostanza deftype QKeyEvent :
   event: ptr<?>
   
lostanza defn key (e:ref<QKeyEvent>) -> ref<Int> :
   return new Int{call-c QKeyEvent_key(e.event)}

;============================================================
;================= Scratch ==================================
;============================================================

extern input_argc: long
extern input_argv: ptr<ptr<byte>>
extern QApplication_new: (int, ptr<ptr<byte>>) -> ptr<?>
extern QApplication_delete: (ptr<?>) -> int
extern QApplication_exec: (ptr<?>) -> int

defn my-listener () :
   new QtWidgetListener :
      defmethod mouse-pressed (this, e:QMouseEvent) :
         println("Mouse pressed")
      defmethod mouse-moved (this, e:QMouseEvent) :
         println("Mouse moved (%_, %_)" % [x(e), y(e)])
      defmethod key-pressed (this, e:QKeyEvent) :
         println("Key pressed %_" % [key(e)])

println("Calling mymain")
lostanza :
   val app = call-c QApplication_new(input_argc as int, input_argv)

   val widget = call-c QtWidget_new(0L as ptr<?>)
   call-c QtWidget_set_listener(widget, obj-id(my-listener()))
   call-c QtWidget_show(widget)
   
   call-c QApplication_exec(app)
println("Done")


