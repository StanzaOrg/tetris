defpackage tetris :
   import core
   import collections

;============================================================
;================== Id Pool =================================
;============================================================

val ID-SEQ = to-seq(0 to false)
val FREE-IDS = Vector<Int>()
val OBJ-MAP = Vector<?>()
public lostanza defn obj-id (x:ref<?>) -> int :
   var id:ref<Int>
   if empty?(FREE-IDS) == true : id = next(ID-SEQ)
   else : id = pop(FREE-IDS)
   set(OBJ-MAP, id, x)
   return id.value

public lostanza defn free-id (id:int) -> ref<False> :
   add(FREE-IDS, new Int{id})
   set(OBJ-MAP, new Int{id}, false)
   return false

public lostanza defn obj (id:int) -> ref<?> :
   return get(OBJ-MAP, new Int{id})

;============================================================   
;=================== QtWidget ===============================
;============================================================

extern QtWidget_new: (ptr<?>) -> ptr<?>
extern QtWidget_delete: (ptr<?>) -> int
extern QtWidget_show: (ptr<?>) -> int
extern QtWidget_set_width: (ptr<?>, int) -> int
extern QtWidget_set_height: (ptr<?>, int) -> int
extern QtWidget_set_listener: (ptr<?>, int) -> int

lostanza deftype QWidget :
   value: ptr<?>

lostanza defn QWidget (parent:ref<QWidget>) -> ref<QWidget> :
   return new QWidget{call-c QtWidget_new(parent.value)}

lostanza defn QWidget () -> ref<QWidget> :
   return new QWidget{call-c QtWidget_new(0L as ptr<?>)}

lostanza defn set-width (w:ref<QWidget>, x:ref<Int>) -> ref<False> :
   call-c QtWidget_set_width(w.value, x.value)
   return false

lostanza defn set-height (w:ref<QWidget>, x:ref<Int>) -> ref<False> :
   call-c QtWidget_set_height(w.value, x.value)
   return false

lostanza defn set-listener (w:ref<QWidget>, x:ref<QWidgetListener>) -> ref<False> :
   call-c QtWidget_set_listener(w.value, obj-id(x))
   return false

lostanza defn show (w:ref<QWidget>) -> ref<False> :
   call-c QtWidget_show(w.value)
   return false

extern defn QtWidget_paintEvent (listener:int, event:ptr<?>) -> int :
   if listener >= 0 :
      painted(obj(listener) as ref<QWidgetListener>)
   return 0

extern defn QtWidget_mousePressEvent (listener:int, event:ptr<?>) -> int :
   if listener >= 0 :
      mouse-pressed(obj(listener) as ref<QWidgetListener>, new QMouseEvent{event})
   return 0

extern defn QtWidget_mouseReleaseEvent (listener:int, event:ptr<?>) -> int :
   if listener >= 0 :
      mouse-released(obj(listener) as ref<QWidgetListener>, new QMouseEvent{event})
   return 0

extern defn QtWidget_mouseMoveEvent (listener:int, event:ptr<?>) -> int :
   if listener >= 0 :
      mouse-moved(obj(listener) as ref<QWidgetListener>, new QMouseEvent{event})
   return 0

extern defn QtWidget_keyPressEvent (listener:int, event:ptr<?>) -> int :
   if listener >= 0 :
      key-pressed(obj(listener) as ref<QWidgetListener>, new QKeyEvent{event})
   return 0

deftype QWidgetListener
defmulti painted (l:QWidgetListener) -> False
defmulti mouse-pressed (l:QWidgetListener, e:QMouseEvent) -> False
defmulti mouse-released (l:QWidgetListener, e:QMouseEvent) -> False
defmulti mouse-moved (l:QWidgetListener, e:QMouseEvent) -> False
defmulti key-pressed (l:QWidgetListener, e:QKeyEvent) -> False

defmethod painted (l:QWidgetListener) : false
defmethod mouse-pressed (l:QWidgetListener, e:QMouseEvent) : false
defmethod mouse-released (l:QWidgetListener, e:QMouseEvent) : false
defmethod mouse-moved (l:QWidgetListener, e:QMouseEvent) : false
defmethod key-pressed (l:QWidgetListener, e:QKeyEvent) : false

;============================================================
;===================== QMouseEvent ==========================
;============================================================

extern QMouseEvent_x: (ptr<?>) -> int
extern QMouseEvent_y: (ptr<?>) -> int

lostanza deftype QMouseEvent :
   event: ptr<?>
   
lostanza defn x (e:ref<QMouseEvent>) -> ref<Int> :
   return new Int{call-c QMouseEvent_x(e.event)}

lostanza defn y (e:ref<QMouseEvent>) -> ref<Int> :
   return new Int{call-c QMouseEvent_y(e.event)}

;============================================================
;================== QKeyEvent ===============================
;============================================================

extern QKeyEvent_key: (ptr<?>) -> int

lostanza deftype QKeyEvent :
   event: ptr<?>
   
lostanza defn key (e:ref<QKeyEvent>) -> ref<Int> :
   return new Int{call-c QKeyEvent_key(e.event)}

;============================================================
;==================== QBrush ================================
;============================================================

extern QBrush_new : () -> ptr<?>
extern QBrush_new_c : (ptr<?>) -> ptr<?>
extern QBrush_delete : (ptr<?>) -> int

lostanza deftype QBrush :
   value:ptr<?>

lostanza defn QBrush () -> ref<QBrush> :
   return new QBrush{call-c QBrush_new()}

lostanza defn QBrush (c:ref<QColor>) -> ref<QBrush> :
   return new QBrush{call-c QBrush_new_c(c.value)}
   
;TODO Add destructor

;============================================================
;===================== QColor ===============================
;============================================================

extern QColor_new : (int, int, int, int) -> ptr<?>
extern QColor_delete : (ptr<?>) -> int

lostanza deftype QColor :
   value:ptr<?>

lostanza defn QColor (r:ref<Int>, g:ref<Int>, b:ref<Int>, a:ref<Int>) -> ref<QColor> :
   return new QColor{call-c QColor_new(r.value, g.value, b.value, a.value)}

;TODO add destructor

;============================================================
;===================== QPixmap ==============================
;============================================================

extern QPixmap_load : (ptr<byte>) -> ptr<?>
extern QPixmap_delete : (ptr<?>) -> int
extern QPixmap_width : (ptr<?>) -> int
extern QPixmap_height : (ptr<?>) -> int

lostanza deftype QPixmap :
   value:ptr<?>

lostanza defn QPixmap (filepath:ref<String>) -> ref<QPixmap> :
   return new QPixmap{call-c QPixmap_load(addr!(filepath.chars))}

lostanza defn width (p:ref<QPixmap>) -> ref<Int> :
   return new Int{call-c QPixmap_width(p.value)}
   
lostanza defn height (p:ref<QPixmap>) -> ref<Int> :
   return new Int{call-c QPixmap_height(p.value)}

;TODO add destructor

;============================================================
;===================== QPen =================================
;============================================================

extern QPen_new : (ptr<?>, int) -> ptr<?>
extern QPen_delete : (ptr<?>) -> int

lostanza deftype QPen :
   value:ptr<?>

lostanza defn QPen (c:ref<QColor>, thickness:ref<Int>) -> ref<QPen> :
   return new QPen{call-c QPen_new(c.value, thickness.value)}

;TOOD add destructor

;============================================================
;================= QApplication =============================
;============================================================

extern input_argc: long
extern input_argv: ptr<ptr<byte>>
extern QApplication_new: (int, ptr<ptr<byte>>) -> ptr<?>
extern QApplication_delete: (ptr<?>) -> int
extern QApplication_exec: (ptr<?>) -> int

lostanza deftype QApplication :
   value: ptr<?>

lostanza defn QApplication () -> ref<QApplication> :
   return new QApplication{call-c QApplication_new(input_argc as int, input_argv)}

lostanza defn exec (a:ref<QApplication>) -> ref<False> :
   call-c QApplication_exec(a.value)
   return false

;TODO add destructor

;============================================================
;================= Scratch ==================================
;============================================================



defn my-listener () :
   new QWidgetListener :
      defmethod mouse-pressed (this, e:QMouseEvent) :
         println("Mouse pressed")
      defmethod mouse-moved (this, e:QMouseEvent) :
         println("Mouse moved (%_, %_)" % [x(e), y(e)])
      defmethod key-pressed (this, e:QKeyEvent) :
         println("Key pressed %_" % [key(e)])

defn main () :   
   println("Calling mymain")
   val app = QApplication()
   val widget = QWidget()
   set-listener(widget, my-listener())
   show(widget)
   exec(app)
   println("Done")

main()


